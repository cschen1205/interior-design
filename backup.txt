{isSelected && !isDragging && (
        <Html position={[meshRef.current.position.x, meshRef.current.position.y + 1, meshRef.current.position.z]}>
        <div
          style={{
            background: "black",
            color: "white",
            padding: "5px",
            borderRadius: "5px",
            display: "flex",
            gap: "5px",
            boxShadow: "0px 0px 10px rgba(0,0,0,0.2)",
            pointerEvents: "auto"
          }}
        >
          <button onClick={(e) =>{e.stopPropagation(); console.log("on click!"); setShowRotationSlider(!showRotationSlider)}}>🔄 Rotate</button>
          <button>⮀ Replace</button>
          <button>📑 Duplicate</button>
          <button>🗑️ Remove</button>
        </div>
      </Html>
      )}

      {isSelected && !isDragging && showRotationSlider && (
        <Html position={[meshRef.current.position.x, meshRef.current.position.y + 1.8, meshRef.current.position.z]}>
          <div
            // onMouseEnter={resetHideTimer}
            // onMouseLeave={resetHideTimer}
            style={{ background: "white", padding: "10px", borderRadius: "5px", boxShadow: "0px 0px 10px rgba(0,0,0,0.2)", display: "flex", flexDirection: "column", alignItems: "center" }}
          >
            <label>Rotation</label>
            <input
              type="range"
              min="0"
              max={Math.PI * 2}
              step="0.1"
              value={rotationY}
              onChange={(e) => setRotationY(parseFloat(e.target.value))}
            />
          </div>
        </Html>
      )}



                {/* <mesh geometry={nodes.vase1.geometry} material={materials.gray} material-envMap={env} />
          <mesh geometry={nodes.bottle.geometry} material={materials.gray} material-envMap={env} />
          <mesh geometry={nodes.walls_1.geometry} material={materials.floor} userData={{name:"f1"}} />
          <mesh geometry={nodes.walls_2.geometry} material={materials.walls} />
          <mesh geometry={nodes.plant_1.geometry} material={materials.potted_plant_01_leaves} />
          <mesh geometry={nodes.plant_2.geometry} material={materials.potted_plant_01_pot} />  */}
          {/* <mesh geometry={nodes.cuttingboard.geometry} material={materials.walls} />
          <mesh geometry={nodes.bowl.geometry} material={materials.walls} />
          <mesh geometry={nodes.carpet.geometry} material={materials.carpet} /> */}
          {/* <DraggingObject id="BRÖNDEN" geometry={nodes.carpet.geometry} material={materials.carpet} env_map={env} 
          position={[0, 0, 0]} onDelete={handleDelete} onReplace={handleReplace} onDeselect={() => setSelectedId(null)}/> */}
          {/* <mesh name="table3" geometry={nodes.table.geometry} material={materials.walls} material-envMap={env} material-envMapIntensity={0.5} /> */}
          {/* <DynamicModel id="VOXLÖV" name="table" ref={(el) => (objectRefs.current["VOXLÖV"] = el)} geometry={nodes.table.geometry} material={materials.walls} env_map={env} 
          envMapIntensity={0.5} onReplace={handleReplace} onDeselect={() => setSelectedId(null)}/> */}
          {/* <Select enabled={hovered === "VOXLÖV"} onPointerOver={over("VOXLÖV")} onPointerOut={() => debouncedHover(null)}>
            <mesh geometry={nodes.table.geometry} material={materials.walls} material-envMap={env} material-envMapIntensity={0.5} />
          </Select> */}
          {/* <mesh geometry={nodes.chairs_1.geometry} material={materials.walls} />
          <mesh geometry={nodes.chairs_2.geometry} material={materials.plastic} material-color="#1a1a1a" material-envMap={env} /> */}
          {/* <Select enabled={hovered === "LIVSVERK"} onPointerOver={over("LIVSVERK")} onPointerOut={() => debouncedHover(null)}> */}
            {/* <mesh geometry={nodes.vase.geometry} material={materials.gray} material-envMap={env} /> */}
          {/* </Select> */}
          {/* <Select enabled={hovered === "SKAFTET"} onPointerOver={over("SKAFTET")} onPointerOut={() => debouncedHover(null)}> */}